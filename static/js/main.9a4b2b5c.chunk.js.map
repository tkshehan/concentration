{"version":3,"sources":["engine.js","components/Info.js","components/Card.js","components/PlayArea.js","components/Concentration.js","App.js","serviceWorker.js","index.js"],"names":["generateCards","cards","values","forEach","suit","value","push","removed","shuffle","array","t","i","m","length","Math","floor","random","Info","props","className","activePlayer","score","Card","handleClick","selected","onClick","classNames","card","this","React","Component","PlayArea","gameOver","map","index","includes","key","gameOverMessage","newGameClick","Concentration","state","selectCard","findIndex","setState","checkMatch","card1Index","card2Index","card1","card2","setTimeout","checkFinish","message","setupGame","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a4b2b5c.chunk.js","sourcesContent":["function generateCards() {\r\n  const cards = [];\r\n  const suits = ['Hearts', 'Spades'];\r\n  const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n  suits.forEach((suit) => {\r\n    values.forEach((value) => {\r\n      cards.push({\r\n        suit,\r\n        value,\r\n        removed: false,\r\n      })\r\n    })\r\n  });\r\n\r\n  return cards;\r\n}\r\n\r\n// Fisher–Yates shuffle\r\nfunction shuffle(array) {\r\n  let m = array.length, t, i;\r\n\r\n  // While there remain elements to shuffle…\r\n  while (m) {\r\n\r\n    // Pick a remaining element…\r\n    i = Math.floor(Math.random() * m--);\r\n\r\n    // And swap it with the current element.\r\n    t = array[m];\r\n    array[m] = array[i];\r\n    array[i] = t;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nexport {generateCards, shuffle};\r\n\r\n","import React from 'react';\r\nimport './Info.css';\r\n\r\nfunction Info(props) {\r\n  return (\r\n    <div className=\"info\">\r\n      <h2 className=\"currentPlayer\">\r\n        Player {props.activePlayer}'s Turn\r\n      </h2>\r\n\r\n      <div className=\"score\">\r\n        <h4>\r\n          Player 1: {props.score[0]}\r\n        </h4>\r\n        <h4>\r\n          Player 2: {props.score[1]}\r\n        </h4>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Info;","import React from 'react';\r\nimport './Card.css';\r\n\r\nclass Card extends React.Component {\r\n\r\n  handleClick = () => {\r\n    if (this.props.removed || this.props.selected) return;\r\n    this.props.onClick(this.props.value, this.props.suit);\r\n  }\r\n\r\n  render() {\r\n    let classNames = 'card';\r\n    let card = '';\r\n\r\n    if (this.props.selected) {\r\n      card = <>{this.props.value}</>;\r\n      classNames += ' selected';\r\n    } else if (this.props.removed) {\r\n      classNames += ' removed';\r\n    } else {\r\n      card = <> <div className=\"cardback\">concentration</div> </>;\r\n    }\r\n\r\n    return (\r\n      <div onClick={this.handleClick} className={classNames}>\r\n        {card}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nimport './PlayArea.css';\r\n\r\nclass PlayArea extends React.Component {\r\n\r\n  render() {\r\n    const cards = this.props.cards.map((card, index) => {\r\n      let selected = false;\r\n      if (this.props.selected.includes(index)) {\r\n        selected = true;\r\n      }\r\n      return (\r\n        <Card\r\n          value={card.value}\r\n          suit={card.suit}\r\n          selected={selected}\r\n          removed={card.removed}\r\n          onClick={this.props.onClick}\r\n          key={index}\r\n        />\r\n      );\r\n    });\r\n\r\n    let gameOver;\r\n    if (this.props.gameOver) {\r\n      gameOver = (\r\n        <>\r\n          <h1 className=\"gameOver\">{this.props.gameOverMessage}</h1>\r\n          <button className=\"newGame\" onClick={this.props.newGameClick}>New Game</button>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"playarea\">\r\n        <div className=\"cards\">\r\n          {cards}\r\n          {gameOver}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayArea;","import React from 'react';\r\nimport {shuffle, generateCards} from '../engine';\r\n\r\nimport Info from './Info';\r\nimport PlayArea from './PlayArea';\r\n\r\nclass Concentration extends React.Component {\r\n  state = {\r\n    cards: shuffle(generateCards()),\r\n    score: [0, 0],\r\n    activePlayer: 1,\r\n    selected: [],\r\n    gameOver: false,\r\n    gameOverMessage: '',\r\n  };\r\n\r\n  selectCard = (value, suit) => {\r\n    // Do not let players choose more than 2 cards\r\n    if (this.state.selected.length === 2) return;\r\n\r\n    const index = this.state.cards.findIndex(\r\n      (card) => card.value === value && card.suit === suit\r\n    );\r\n\r\n    this.setState({\r\n      selected: [...this.state.selected, index]\r\n    });\r\n  }\r\n\r\n  checkMatch = () => {\r\n    if (this.state.selected.length === 2) {\r\n      const card1Index = this.state.selected[0];\r\n      const card2Index = this.state.selected[1];\r\n      const card1 = this.state.cards[card1Index];\r\n      const card2 = this.state.cards[card2Index];\r\n\r\n      if (card1.value === card2.value) {\r\n        const score = [...this.state.score];\r\n        score[this.state.activePlayer - 1]++;\r\n\r\n        const cards = [...this.state.cards];\r\n        cards[card1Index].removed = true;\r\n        cards[card2Index].removed = true;\r\n\r\n        setTimeout(() => {\r\n          this.setState({\r\n            selected: [],\r\n            cards,\r\n            score,\r\n          })\r\n        }, 1500);\r\n      } else {\r\n        // Reset selected cards and change player\r\n        setTimeout(() => {\r\n          this.setState({\r\n            selected: [],\r\n            activePlayer: this.state.activePlayer === 1 ? 2 : 1,\r\n          });\r\n        }, 2000);\r\n      }\r\n    }\r\n  }\r\n\r\n  checkFinish = () => {\r\n    if (!this.state.gameOver && this.state.score[0] + this.state.score[1] >= this.state.cards.length / 2) {\r\n      let message;\r\n      if (this.state.score[0] > this.state.score[1]) {\r\n        message = 'Player 1 Wins';\r\n      } else if (this.state.score[1] > this.state.score[0]) {\r\n        message = 'Player 2 Wins';\r\n      } else {\r\n        message = 'Tie Game';\r\n      }\r\n\r\n      this.setState({\r\n        gameOverMessage: message,\r\n        gameOver: true,\r\n      })\r\n    }\r\n  }\r\n\r\n  setupGame = () => {\r\n    this.setState({\r\n      cards: shuffle(generateCards()),\r\n      score: [0, 0],\r\n      activePlayer: 1,\r\n      selected: [],\r\n      gameOver: false,\r\n      gameOverMessage: '',\r\n    });\r\n  }\r\n\r\n  render() {\r\n    this.checkMatch();\r\n    this.checkFinish();\r\n    return (\r\n      <>\r\n        <Info\r\n          activePlayer={this.state.activePlayer}\r\n          score={this.state.score}\r\n        />\r\n        <PlayArea\r\n          cards={this.state.cards}\r\n          onClick={this.selectCard}\r\n          selected={this.state.selected}\r\n          gameOverMessage={this.state.gameOverMessage}\r\n          gameOver={this.state.gameOver}\r\n          newGameClick={this.setupGame}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Concentration;","import React from 'react';\nimport Concentration from './components/Concentration';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n\n      </header>\n      <main>\n        <Concentration />\n      </main>\n\n      <footer>\n\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}